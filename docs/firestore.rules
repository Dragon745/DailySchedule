rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    // Helper function to validate timestamp
function isValidTimestamp(timestampValue) {
  return timestampValue is timestamp && timestampValue > timestamp('1970-01-01T00:00:00Z');
}
    
    // Helper function to validate time string (HH:MM format)
    function isValidTimeString(timeStr) {
      return timeStr is string && 
             timeStr.matches('^([01]?[0-9]|2[0-3]):[0-5][0-9]$');
    }
    
    // Helper function to validate date string (YYYY-MM-DD format)
    function isValidDateString(dateStr) {
      return dateStr is string && 
             dateStr.matches('^\\d{4}-\\d{2}-\\d{2}$');
    }
    
    // Helper function to validate hex color
    function isValidHexColor(color) {
      return color is string && 
             color.matches('^#[0-9A-Fa-f]{6}$');
    }
    
    // Helper function to validate priority level
    function isValidPriority(priority) {
      return priority is number && priority >= 1 && priority <= 3;
    }
    
    // Helper function to validate status
    function isValidStatus(status) {
      return status in ['active', 'completed', 'paused', 'cancelled'];
    }
    
    // Helper function to validate days of week array
    function isValidDaysOfWeek(days) {
      return days is list && 
             days.size() > 0 && 
             days.size() <= 7 &&
             days.hasAll([1, 2, 3, 4, 5, 6, 7]) == false &&
             days.hasOnly([1, 2, 3, 4, 5, 6, 7]);
    }

    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Validate user document structure
      function isValidUserDocument() {
        let data = request.resource.data;
        return data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt']) &&
               data.uid is string &&
               data.email is string &&
               data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
               data.displayName is string &&
               data.displayName.size() > 0 &&
               data.displayName.size() <= 100 &&
               isValidTimestamp(data.createdAt) &&
               (data.lastLoginAt == null || isValidTimestamp(data.lastLoginAt)) &&
               (data.photoURL == null || data.photoURL is string) &&
               (data.preferences == null || isValidUserPreferences(data.preferences));
      }
      
      function isValidUserPreferences(prefs) {
        return prefs is map &&
               (prefs.timezone == null || prefs.timezone is string) &&
               (prefs.defaultStartTime == null || isValidTimeString(prefs.defaultStartTime)) &&
               (prefs.defaultEndTime == null || isValidTimeString(prefs.defaultEndTime)) &&
               (prefs.workDays == null || isValidDaysOfWeek(prefs.workDays)) &&
               (prefs.notifications == null || prefs.notifications is bool);
      }
      
      allow create, update: if isValidUserDocument();
    }

    // Categories collection - users can only access their own categories
    match /categories/{categoryId} {
      allow read, write: if isOwner(resource.data.uid);
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.uid;
      
      // Validate category document structure
      function isValidCategoryDocument() {
        let data = request.resource.data;
        return data.keys().hasAll(['uid', 'categoryId', 'name', 'type', 'isActive', 'createdAt', 'updatedAt']) &&
               data.uid is string &&
               data.categoryId is string &&
               data.name is string &&
               data.name.size() > 0 &&
               data.name.size() <= 50 &&
               data.type is string &&
               data.type in ['main', 'sub'] &&
               (data.type == 'main' || (data.type == 'sub' && data.parentCategoryId is string)) &&
               data.isActive is bool &&
               isValidTimestamp(data.createdAt) &&
               isValidTimestamp(data.updatedAt) &&
               (data.description == null || (data.description is string && data.description.size() <= 200)) &&
               (data.color == null || isValidHexColor(data.color)) &&
               (data.icon == null || data.icon is string) &&
               (data.totalTimeSpent == null || data.totalTimeSpent is number && data.totalTimeSpent >= 0) &&
               (data.totalSessions == null || data.totalSessions is number && data.totalSessions >= 0);
      }
      
      allow create, update: if isValidCategoryDocument();
    }

    // Schedules collection - users can only access their own schedules
    match /schedules/{scheduleId} {
      allow read, write: if isOwner(resource.data.uid);
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.uid;
      
      // Validate schedule document structure
      function isValidScheduleDocument() {
        let data = request.resource.data;
        return data.keys().hasAll(['uid', 'scheduleId', 'categoryId', 'categoryName', 'title', 'startTime', 'endTime', 'daysOfWeek', 'isRecurring', 'isActive', 'createdAt', 'updatedAt']) &&
               data.uid is string &&
               data.scheduleId is string &&
               data.categoryId is string &&
               data.categoryName is string &&
               data.title is string &&
               data.title.size() > 0 &&
               data.title.size() <= 100 &&
               isValidTimeString(data.startTime) &&
               isValidTimeString(data.endTime) &&
               isValidDaysOfWeek(data.daysOfWeek) &&
               data.isRecurring is bool &&
               data.isActive is bool &&
               isValidTimestamp(data.createdAt) &&
               isValidTimestamp(data.updatedAt) &&
               (data.description == null || (data.description is string && data.description.size() <= 500)) &&
               (data.estimatedDuration == null || (data.estimatedDuration is number && data.estimatedDuration > 0)) &&
               (data.priority == null || isValidPriority(data.priority));
      }
      
      allow create, update: if isValidScheduleDocument();
    }

    // TimeTracking collection - users can only access their own tracking sessions
    match /timeTracking/{trackingId} {
      allow read, write: if isOwner(resource.data.uid);
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.uid;
      
      // Validate timeTracking document structure
      function isValidTimeTrackingDocument() {
        let data = request.resource.data;
        return data.keys().hasAll(['uid', 'trackingId', 'categoryId', 'categoryName', 'title', 'startTime', 'status', 'createdAt', 'updatedAt']) &&
               data.uid is string &&
               data.trackingId is string &&
               data.categoryId is string &&
               data.categoryName is string &&
               data.title is string &&
               data.title.size() > 0 &&
               data.title.size() <= 100 &&
               isValidTimestamp(data.startTime) &&
               isValidStatus(data.status) &&
               isValidTimestamp(data.createdAt) &&
               isValidTimestamp(data.updatedAt) &&
               (data.scheduleId == null || data.scheduleId is string) &&
               (data.description == null || (data.description is string && data.description.size() <= 500)) &&
               (data.endTime == null || isValidTimestamp(data.endTime)) &&
               (data.duration == null || (data.duration is number && data.duration >= 0)) &&
               (data.notes == null || (data.notes is string && data.notes.size() <= 1000)) &&
               (data.tags == null || (data.tags is list && data.tags.size() <= 10 && data.tags.hasOnly(['string'])));
      }
      
      allow create, update: if isValidTimeTrackingDocument();
    }

    // DailyStats collection - users can only access their own daily statistics
    match /dailyStats/{dateId} {
      allow read, write: if isOwner(resource.data.uid);
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.uid;
      
      // Validate dailyStats document structure
      function isValidDailyStatsDocument() {
        let data = request.resource.data;
        return data.keys().hasAll(['uid', 'date', 'totalTimeSpent', 'categoryBreakdown', 'completedSchedules', 'totalSchedules', 'productivityScore', 'createdAt', 'updatedAt']) &&
               data.uid is string &&
               isValidDateString(data.date) &&
               data.totalTimeSpent is number &&
               data.totalTimeSpent >= 0 &&
               data.categoryBreakdown is map &&
               data.completedSchedules is number &&
               data.completedSchedules >= 0 &&
               data.totalSchedules is number &&
               data.totalSchedules >= 0 &&
               data.productivityScore is number &&
               data.productivityScore >= 0 &&
               data.productivityScore <= 100 &&
               isValidTimestamp(data.createdAt) &&
               isValidTimestamp(data.updatedAt);
      }
      
      allow create, update: if isValidDailyStatsDocument();
    }

    // WeeklyStats collection - users can only access their own weekly statistics
    match /weeklyStats/{weekId} {
      allow read, write: if isOwner(resource.data.uid);
      allow create: if isAuthenticated() && 
                      request.auth.uid == request.resource.data.uid;
      
      // Validate weeklyStats document structure
      function isValidWeeklyStatsDocument() {
        let data = request.resource.data;
        return data.keys().hasAll(['uid', 'weekStart', 'weekEnd', 'totalTimeSpent', 'categoryBreakdown', 'averageDailyTime', 'goalsMet', 'totalGoals', 'createdAt', 'updatedAt']) &&
               data.uid is string &&
               isValidDateString(data.weekStart) &&
               isValidDateString(data.weekEnd) &&
               data.totalTimeSpent is number &&
               data.totalTimeSpent >= 0 &&
               data.categoryBreakdown is map &&
               data.averageDailyTime is number &&
               data.averageDailyTime >= 0 &&
               data.goalsMet is number &&
               data.goalsMet >= 0 &&
               data.totalGoals is number &&
               data.totalGoals >= 0 &&
               isValidTimestamp(data.createdAt) &&
               isValidTimestamp(data.updatedAt) &&
               (data.mostProductiveDay == null || isValidDateString(data.mostProductiveDay)) &&
               (data.leastProductiveDay == null || isValidDateString(data.leastProductiveDay));
      }
      
      allow create, update: if isValidWeeklyStatsDocument();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
